// Search A 2D Matrix
// In this question, we have to write a program that searches for a value in an m x n matrix. 
//  This matrix has the following properties:
//            a) Integers in each row are sorted from left to right.
//            b) The first integer of each row is greater than the last integer of the previous row.

// Code

#include <iostream>
using namespace std;

// function to search an element 
bool searchMatrix(int matrix[100][100], int target, int n, int m) {
      
        int i =0, j=m-1;
        
        while(i<n && j>=0){
            if(matrix[i][j] == target)
                return true;
            else if(matrix[i][j] < target)
                i++;
            else
                j--;
        } 
        
        return false;
}
  
// main function   
int main()
{
    
    int target;
    cout<<"Enter Number of rows : ";
    cin>>rows;
    cout<<"Enter Number of columns : ";
    cin>>cols;
    cout<<"Enter target element : ";
    cin>>target;
    int arr[100][100];
    cout<<"Enter array elements :"<<endl;
    for(int i=0;i<rows;i++){
        for(int j=0;j<cols;j++){
            cin>>arr[i][j];
        }
    }
    
    bool res = searchMatrix(arr, target, rows, cols);
    if(res)
    cout<<"element found";
    else
    cout<<"element not found";
    
    return 0;
}

// Input 1:
// matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]]  and target = 3
// Output : element found

// Input 2:
// [[1,3,5,7],[10,11,16,20],[23,30,34,60]]
// Output : element not found


// Time Complexity : O(n+m) , where n = number of rows and m = number of columns
// Space Complexity : O(1)
